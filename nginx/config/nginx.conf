user  nginx;
# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto; #some last versions calculate it automatically

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 65536;

# Loading geoip2 module
# load_module modules/ngx_http_geoip2_module.so;
# load_module modules/ngx_http_vhost_traffic_status_module.so;

pid        /var/run/nginx.pid;

error_log  /var/log/nginx/error.log warn;

events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections  8192;
    # optimized to serve many clients with each thread, essential for linux
    use epoll;
}

http {

    # geoip2 /etc/nginx/GeoIP2DataBase/GeoLite2-City.mmdb {
    #     auto_reload 5m;
    #     $geoip2_data_country_code country iso_code;
    #     $geoip2_data_city_name city names en;
    # }

    # -----------------------------------------------------------
    # THE NGINX ULTIMATE BAD BOT, BAD IP AND BAD REFERRER BLOCKER
    # Repo Url: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker
    # -----------------------------------------------------------
    include /etc/nginx/snippets/botblocker-nginx-settings.conf;
    include /etc/nginx/snippets/globalblacklist.conf;

    ## Add here all countries that are to blocked.
    # map $geoip2_data_country_code $allowed_UA_only {
    #     default no;
    #     UA yes;
    # }

    # map $geoip2_data_country_code $allowed_Europe_and_USA {
    #     default no;
    #     UA yes; # Ukraine
    #     AT yes; # Austria
    #     BE yes; # Belgium
    #     BG yes; # Bulgaria
    #     HR yes; # Croatia
    #     CZ yes; # Czech
    #     DK yes; # Denmark
    #     EE yes; # Estonia
    #     FI yes; # Finland
    #     FR yes; # France
    #     DE yes; # Germany
    #     HU yes; # Hungary
    #     IT yes; # Italy
    #     LV yes; # Latvia
    #     LT yes; # Lithuania
    #     PL yes; # Poland
    #     RO yes; # Romania
    #     SK yes; # Slovakia
    #     SI yes; # Slovenia
    #     ES yes; # Spain
    #     SE yes; # Sweden
    #     GB yes; # United Kingdom
    #     CA yes; # Canada
    #     US yes; # USA
    # }

    # # limit the number of connections per single IP
    # limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # # limit the number of requests for a given session
    # limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;
    # limit_req_status 429;

    #extended status
    # vhost_traffic_status_zone;

    include       /etc/nginx/mime.types;
    include       /etc/nginx/sites-enabled/*.conf;

    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"'
                    '"$server_name" '
                    '"$request_time" "$upstream_response_time" "$upstream_connect_time"';

    access_log /var/log/nginx/access.log main;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile        on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush     on;

    # mask server version
    server_tokens off;

    keepalive_timeout  65;

    # compression
    gzip  on;
    gzip_disable "msie6";
    gzip_comp_level 5;
    gzip_proxied any;
    #gzip_buffers 16 8k;
    gzip_types
        text/plain
        text/css
        application/json
        application/x-javascript
        text/xml
        application/xml
        application/xml+rss
        text/javascript
        application/javascript
        font/truetype
        font/opentype
        image/svg+xml;

    server {
        listen       80 default_server;
        return 444;
    }

    server {
        listen       443 ssl default_server;
        ssl_certificate /etc/ssl/localhost.crt;
        ssl_certificate_key /etc/ssl/localhost.key;
        include /etc/nginx/snippets/ssl.conf;
        return 444;
    }

}
